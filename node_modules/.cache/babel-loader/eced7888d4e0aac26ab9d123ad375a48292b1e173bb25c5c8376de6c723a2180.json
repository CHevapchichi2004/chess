{"ast":null,"code":"import { Cell } from \"./Cell\";\nimport { colors } from \"./Colors\";\nimport { Figure } from \"./figures/Figure\";\nimport { Paw } from \"./figures/Paw\";\nimport { Queen } from \"./figures/Queen\";\nexport class Board {\n  constructor() {\n    this.cells = [];\n  }\n  initCels() {\n    for (let i = 0; i < 8; i++) {\n      const row = [];\n      for (let j = 0; j < 8; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, colors.BLACK, Figure));\n        } else {\n          row.push(new Cell(this, j, i, colors.WHITE, Figure));\n        }\n      }\n      this.cells.push(row);\n    }\n  }\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n  addFigures() {\n    for (let i = 0; i < 8; i++) {\n      new Paw(colors.BLACK, this.getCell(i, 1));\n      new Paw(colors.WHITE, this.getCell(i, 6));\n    }\n    new Queen(colors.WHITE, this.getCell(3, 3));\n  }\n}","map":{"version":3,"names":["Cell","colors","Figure","Paw","Queen","Board","constructor","cells","initCels","i","row","j","push","BLACK","WHITE","getCell","x","y","addFigures"],"sources":["D:/chess-ts/chess-ts/src/models/Board.ts"],"sourcesContent":["import { Cell } from \"./Cell\";\r\nimport { colors } from \"./Colors\";\r\nimport { Figure } from \"./figures/Figure\";\r\nimport { Paw } from \"./figures/Paw\";\r\nimport { Queen } from \"./figures/Queen\";\r\nexport class Board {\r\n\tcells: Cell[][] = [];\r\n\tpublic initCels() {\r\n\t\tfor (let i = 0; i < 8; i++) {\r\n\t\t\tconst row: Cell[] = [];\r\n\t\t\tfor (let j = 0; j < 8; j++) {\r\n\t\t\t\tif ((i + j) % 2 !== 0) {\r\n\t\t\t\t\trow.push(new Cell(this, j, i, colors.BLACK, Figure));\r\n\t\t\t\t} else {\r\n\t\t\t\t\trow.push(new Cell(this, j, i, colors.WHITE, Figure));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.cells.push(row);\r\n\t\t}\r\n\t}\r\n\tpublic getCell(x: number, y: number) {\r\n\t\treturn this.cells[y][x];\r\n\t}\r\n\r\n\tpublic addFigures() {\r\n\t\tfor (let i = 0; i < 8; i++) {\r\n\t\t\tnew Paw(colors.BLACK, this.getCell(i, 1));\r\n\t\t\tnew Paw(colors.WHITE, this.getCell(i, 6));\r\n\t\t}\r\n\t\tnew Queen(colors.WHITE, this.getCell(3, 3));\r\n\t}\r\n}\r\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,QAAQ;AAC7B,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,GAAG,QAAQ,eAAe;AACnC,SAASC,KAAK,QAAQ,iBAAiB;AACvC,OAAO,MAAMC,KAAK,CAAC;EAAAC,YAAA;IAAA,KAClBC,KAAK,GAAa,EAAE;EAAA;EACbC,QAAQA,CAAA,EAAG;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3B,MAAMC,GAAW,GAAG,EAAE;MACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC3B,IAAI,CAACF,CAAC,GAAGE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;UACtBD,GAAG,CAACE,IAAI,CAAC,IAAIZ,IAAI,CAAC,IAAI,EAAEW,CAAC,EAAEF,CAAC,EAAER,MAAM,CAACY,KAAK,EAAEX,MAAM,CAAC,CAAC;QACrD,CAAC,MAAM;UACNQ,GAAG,CAACE,IAAI,CAAC,IAAIZ,IAAI,CAAC,IAAI,EAAEW,CAAC,EAAEF,CAAC,EAAER,MAAM,CAACa,KAAK,EAAEZ,MAAM,CAAC,CAAC;QACrD;MACD;MACA,IAAI,CAACK,KAAK,CAACK,IAAI,CAACF,GAAG,CAAC;IACrB;EACD;EACOK,OAAOA,CAACC,CAAS,EAAEC,CAAS,EAAE;IACpC,OAAO,IAAI,CAACV,KAAK,CAACU,CAAC,CAAC,CAACD,CAAC,CAAC;EACxB;EAEOE,UAAUA,CAAA,EAAG;IACnB,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3B,IAAIN,GAAG,CAACF,MAAM,CAACY,KAAK,EAAE,IAAI,CAACE,OAAO,CAACN,CAAC,EAAE,CAAC,CAAC,CAAC;MACzC,IAAIN,GAAG,CAACF,MAAM,CAACa,KAAK,EAAE,IAAI,CAACC,OAAO,CAACN,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C;IACA,IAAIL,KAAK,CAACH,MAAM,CAACa,KAAK,EAAE,IAAI,CAACC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}